#!/usr/bin/env zsh

# name: vsdoc
# usage: vsdoc <extension-id>
# description: Get the documentation for a VSCode extension and save it to a file
function vsdoc() {
  local extension_id=$1
  # Optional second argument -F to force overwrite
  if [[ $2 == "-F" ]]; then
    echo "Forcing overwrite"
    local force_overwrite=true
  fi

  local extension_data=$(npx vsce show --json $extension_id)
  local extension_name=$(echo $extension_data | jq -r '.extensionName')
  local display_name=$(echo $extension_data | jq -r '.displayName')
  local extension_description=$(echo $extension_data | jq -r '.shortDescription')
  local extension_authors=$(echo $extension_data | jq -r '.publisher.displayName')
  local extension_category=$(echo $extension_data | jq -r '.categories[0]')
  local extension_tags=$(echo $extension_data | jq '.tags[]')
  local file_name="$HOME/git/andrewmcodes/digital-brain/app.vscode.ext.$extension_name.md"

  if [ -f "$file_name" ] && [ -z "$force_overwrite" ]; then
    echo "File already exists"
    return 1
  fi

  # Format the tags as a markdown list
  local tag_output=""
  for tag in $extension_tags; do
    tag_output+="  - \`$tag\`\n"
  done

  # Template for the markdown file
  local template=$(
    cat <<EOF
---
type: tool
id: "$extension_id"
aliases:
  - "$display_name"
description: "$extension_description"
category:
author:
  - "[[$extension_authors]]"
url: "https://marketplace.visualstudio.com/items?itemName=$extension_id"
up: "[[VSCode Extensions]]"
---

$tag_output
EOF
  )

  # Output the template to the file
  echo -e "$template" >"$file_name"

  if [[ $? == 0 ]]; then
    osascript -e 'display notification "VS Code extension saved to file" with title "vscedoc"'
  else
    osascript -e 'display notification "VS Code extension failed to save to file" with title "vscedoc"'
  fi
}
